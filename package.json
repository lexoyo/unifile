{
  "name": "unifile",
  "description": "Express middleware to provide a common API for cloud storage services. ",
  "version": "0.0.47",
  "author": {
    "name": "Alex Hoyau aka lexoyo"
  },
  "contributors": [
    {
      "name": "Thomas Fetiveau aka zabojad"
    }
  ],
  "dependencies": {
    "dbox": "~0.6.3",
    "express": "~4.8.5",
    "ftp": "~0.3.7",
    "jade": "~1.5.0",
    "mime": "~1.2.11",
    "path": "~0.4.9",
    "unorm": "~1.3.3",
    "mediafire-javascript-sdk": "git://github.com/lexoyo/mediafire-javascript-sdk"
  },
  "devDependencies": {
    "body-parser": "~1.6.5",
    "connect-multiparty": "~1.2.1",
    "cookie-parser": "~1.3.2",
    "express-session": "1.7.6",
    "chai": "~1.9.1",
    "supertest": "~0.13.0",
    "mocha": "~1.21.4",
    "precommit-hook": "~1.0.7"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/silexlabs/unifile.git"
  },
  "keywords": [
    "express",
    "cloud",
    "cms",
    "rest",
    "dropbox",
    "google-drive",
    "storage",
    "filepicker",
    "api"
  ],
  "main": "./lib/index.js",
  "directories": {
    "lib": "./lib"
  },
  "license": "MIT",
  "engines": {
    "node": "~0.10.30",
    "npm": "~1.3.0"
  },
  "scripts": {
    "test": "make test"
  },
  "precommit": [
    "test"
  ],
  "readme": "#Unifile, unified access to cloud storage services.\n\nExpress middleware to provide REST API for accessing cloud storage services.\n\n#Motivation\n\nIn 2013, team has developed the v2 of [Silex](http://www.silex.me/), free and open source website builder for designers. Since Silex is a web app, running in the browser, we faced a choice: either we make people download and install Silex, or we host it in the cloud. But Silex Labs non profit organization can not afford paying hosting for our users.\n\nSo we have decided that Silex would edit the user's files on the user's Dropbox. It is not acceptable for a free project to force people to store their data on a service such as Dropbox, so we decided to make it an option. We have added the ability for Silex to edit files on the server on which it is installed. And then other services came to our minds.\n\nWe hope that other communities will benefit this way to use their cloud services before they install the web app locally.\n\n#How to install\n\nIn your project folder, use npm to install unifile nodejs module\n\n    $ npm install unifile\n\nThen write a small node.js server like this\n\n    // node modules\n    var unifile = require('unifile');\n    var express = require('express');\n    var app = express();\n\n    // config\n    var options = unifile.defaultConfig;\n\n    // use unifile as a middleware\n    app.use(unifile.middleware(express, app, options));\n\n    // server 'loop'\n    app.listen(6805); // 6805 is the date of sexual revolution started in paris france 8-)\n\nSave this as server.js and start it with \n\n    $ node server.js\n\nThen start making calls with wget or your browser. For example...\n\n    $ wget http://localhost:6805/api/v1.0/services/list/\n\n... will list the available services:\n\n    [\n        {\n            \"name\": \"dropbox\",\n            \"display_name\": \"Dropbox\",\n            \"description\": \"Edit html files from your Dropbox.\",\n            \"isLoggedIn\": true,\n            \"isConnected\": true,\n            \"user\": {\n                \"display_name\": \"Alex Hoyau\",\n                \"quota_info\": {\n                    \"available\": 5234491392,\n                    \"used\": 4528634951\n                }\n            }\n        },\n        {\n            \"name\": \"www\",\n            \"display_name\": \"Web server\",\n            \"description\": \"Edit files on the server where Silex is installed.\",\n            \"isLoggedIn\": false,\n            \"isConnected\": false\n            \"user\": {\n                \"display_name\": \"admin\",\n            }\n        }\n    ]\n\n#REST APIs\n\nLet's take the example of the Dropbox service\n\nConnect to the service\n\nBasic login and such\n\n    GET    /api/v1.0/dropbox/connect/       returns an URL, which you will open and authorize unifile to access the service (this is an oauth2 authorization mechanism)\n    GET   /api/v1.0/dropbox/login/          now your have access to the service\n\n    GET   /api/v1.0/dropbox/account/        Get your account info, with your display_name at least\n    GET   /api/v1.0/dropbox/logout/         Log out from the service (connect and login will be required)\n\nExecute commands\n\n    GET    /api/v1.0/dropbox/exec/ls/path/to/folder/                 list a directory\n    GET    /api/v1.0/dropbox/exec/rm/path/to/folder-or-file/         remove a file or directory\n    GET    /api/v1.0/dropbox/exec/mkdir/path/to/folder/              create a directory\n    GET    /api/v1.0/dropbox/exec/cp/path/to/src/:/path/to/dst/      copy a file or directory\n    GET    /api/v1.0/dropbox/exec/mv/path/to/src/:/path/to/dst/      move (rename) a file or directory\n    GET    /api/v1.0/dropbox/exec/get/path/to/file.txt               access a file\n    GET    /api/v1.0/dropbox/exec/put/path/to/file.txt:{string}      write data to a file\n    POST    /api/v1.0/dropbox/exec/put/path/to/file.txt              write data to a file\n\n#License\n\nlicense: GPL\n\n#Developer guide\n\nHere is how to contribute\n\n##Add a service\n\nThe services in unifile are cloud storage services, e.g. Dropbox and google drive.\n\nEach service is a Node.js class implementing a given set of functions, e.g. ls, rm, cp...\n\nIf you wish to add a service,\n\n* add your .js file in lib/services/ (duplicate the lib/services/dropbox.js file in order to have all the required methods)\n* edit core/router.js to make your service reachable\n* if you use an external node.js library, add the dependency in package.json\n* write functionnal tests, duplicate test/www-tests.js and change it to test your service\n\nHere is a list of services which could be useful\n\n* github (they provides free hosting, see https://help.github.com/articles/user-organization-and-project-pages)\n* FTP\n* Box, SkyDrive, RapidShare, CloudMine, FilesAnywhere, RapidShare\n* SugarSync\n* Amazon S3 and WebDav\n\n##Notes / roadmap\n\nto do\n\n* finish the www service (execute \"make test\" to check what is missing)\n* unit tests for dropbox\n* pagination for ls commands\n* doc: https://app.apiary.io/unifile/ or http://apiblueprint.org/\n* check best practices for the api\n  http://www.startupcto.com/backend-tech/building-an-api-best-practices\n* navigation / display of the routes: use jade templates\n\narchi, tests and readme\n\n* doc: https://www.dreamfactory.com/developers/live_API\n* https://npmjs.org/package/social-cms-backend\n* tests http://stackoverflow.com/questions/11520170/unit-testing-oauth-js-with-mocha\n\nto do maybe?\n\n* ? mimic unix commands : /v1.0/gdrive/exec/?cmd=\"cd /example1/test/ ; cp img1.jpg img2.jpg ; ls\"\n* make a Terminal in javascript to test the services\n\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/silexlabs/unifile/issues"
  },
  "_id": "unifile@0.0.44",
  "_from": "unifile@0.0.44",
  "homepage": "https://github.com/silexlabs/unifile",
  "_shasum": "7b3a39cabc0e7d0cf765868897997ac9ce97b430",
  "_resolved": "https://registry.npmjs.org/unifile/-/unifile-0.0.44.tgz"
}
